diff -urN linux-2.6.19/drivers/mtd/maps/Kconfig linux-2.6.19.new/drivers/mtd/maps/Kconfig
--- linux-2.6.19/drivers/mtd/maps/Kconfig	2006-11-29 22:57:37.000000000 +0100
+++ linux-2.6.19.new/drivers/mtd/maps/Kconfig	2006-12-18 17:21:07.000000000 +0100
@@ -224,6 +224,13 @@
 	  Flash memory access on 4G Systems MTX-1 Board. If you have one of
 	  these boards and would like to use the flash chips on it, say 'Y'.
 
+config MTD_BCM963XX
+        tristate "BCM963xx Flash device"
+        depends on MIPS && BCM963XX
+        help
+	  Flash memory access on BCM963xx boards. Currently only works with
+	  RedBoot, CFE support coming soon.
+
 config MTD_DILNETPC
 	tristate "CFI Flash device mapped on DIL/Net PC"
 	depends on X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT
diff -urN linux-2.6.19/drivers/mtd/maps/Makefile linux-2.6.19.new/drivers/mtd/maps/Makefile
--- linux-2.6.19/drivers/mtd/maps/Makefile	2006-11-29 22:57:37.000000000 +0100
+++ linux-2.6.19.new/drivers/mtd/maps/Makefile	2006-12-18 17:21:07.000000000 +0100
@@ -70,3 +70,4 @@
 obj-$(CONFIG_MTD_OMAP_NOR)	+= omap_nor.o
 obj-$(CONFIG_MTD_MTX1)		+= mtx-1_flash.o
 obj-$(CONFIG_MTD_TQM834x)	+= tqm834x.o
+obj-$(CONFIG_MTD_BCM963XX)      += bcm963xx-flash.o
diff -urN linux-2.6.19/drivers/mtd/maps/Makefile.orig linux-2.6.19.new/drivers/mtd/maps/Makefile.orig
--- linux-2.6.19/drivers/mtd/maps/Makefile.orig	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.19.new/drivers/mtd/maps/Makefile.orig	2006-11-29 22:57:37.000000000 +0100
@@ -0,0 +1,72 @@
+#
+# linux/drivers/maps/Makefile
+#
+# $Id: Makefile.common,v 1.34 2005/11/07 11:14:26 gleixner Exp $
+
+ifeq ($(CONFIG_MTD_COMPLEX_MAPPINGS),y)
+obj-$(CONFIG_MTD)		+= map_funcs.o
+endif
+
+# Chip mappings
+obj-$(CONFIG_MTD_CDB89712)	+= cdb89712.o
+obj-$(CONFIG_MTD_ARM_INTEGRATOR)+= integrator-flash.o
+obj-$(CONFIG_MTD_BAST)		+= bast-flash.o
+obj-$(CONFIG_MTD_CFI_FLAGADM)	+= cfi_flagadm.o
+obj-$(CONFIG_MTD_CSTM_MIPS_IXX)	+= cstm_mips_ixx.o
+obj-$(CONFIG_MTD_DC21285)	+= dc21285.o
+obj-$(CONFIG_MTD_DILNETPC)	+= dilnetpc.o
+obj-$(CONFIG_MTD_L440GX)	+= l440gx.o
+obj-$(CONFIG_MTD_AMD76XROM)	+= amd76xrom.o
+obj-$(CONFIG_MTD_ICHXROM)	+= ichxrom.o
+obj-$(CONFIG_MTD_TSUNAMI)	+= tsunami_flash.o
+obj-$(CONFIG_MTD_LUBBOCK)	+= lubbock-flash.o
+obj-$(CONFIG_MTD_MAINSTONE)	+= mainstone-flash.o
+obj-$(CONFIG_MTD_MBX860)	+= mbx860.o
+obj-$(CONFIG_MTD_CEIVA)		+= ceiva.o
+obj-$(CONFIG_MTD_OCTAGON)	+= octagon-5066.o
+obj-$(CONFIG_MTD_PHYSMAP)	+= physmap.o
+obj-$(CONFIG_MTD_PNC2000)	+= pnc2000.o
+obj-$(CONFIG_MTD_PCMCIA)	+= pcmciamtd.o
+obj-$(CONFIG_MTD_RPXLITE)	+= rpxlite.o
+obj-$(CONFIG_MTD_TQM8XXL)	+= tqm8xxl.o
+obj-$(CONFIG_MTD_SA1100)	+= sa1100-flash.o
+obj-$(CONFIG_MTD_IPAQ)		+= ipaq-flash.o
+obj-$(CONFIG_MTD_SBC_GXX)	+= sbc_gxx.o
+obj-$(CONFIG_MTD_SC520CDP)	+= sc520cdp.o
+obj-$(CONFIG_MTD_NETSC520)	+= netsc520.o
+obj-$(CONFIG_MTD_TS5500)	+= ts5500_flash.o
+obj-$(CONFIG_MTD_SUN_UFLASH)	+= sun_uflash.o
+obj-$(CONFIG_MTD_VMAX)		+= vmax301.o
+obj-$(CONFIG_MTD_SCx200_DOCFLASH)+= scx200_docflash.o
+obj-$(CONFIG_MTD_DBOX2)		+= dbox2-flash.o
+obj-$(CONFIG_MTD_OCELOT)	+= ocelot.o
+obj-$(CONFIG_MTD_SOLUTIONENGINE)+= solutionengine.o
+obj-$(CONFIG_MTD_PCI)		+= pci.o
+obj-$(CONFIG_MTD_ALCHEMY)       += alchemy-flash.o
+obj-$(CONFIG_MTD_LASAT)		+= lasat.o
+obj-$(CONFIG_MTD_AUTCPU12)	+= autcpu12-nvram.o
+obj-$(CONFIG_MTD_EDB7312)	+= edb7312.o
+obj-$(CONFIG_MTD_IMPA7)		+= impa7.o
+obj-$(CONFIG_MTD_FORTUNET)	+= fortunet.o
+obj-$(CONFIG_MTD_REDWOOD)	+= redwood.o
+obj-$(CONFIG_MTD_UCLINUX)	+= uclinux.o
+obj-$(CONFIG_MTD_NETtel)	+= nettel.o
+obj-$(CONFIG_MTD_SCB2_FLASH)	+= scb2_flash.o
+obj-$(CONFIG_MTD_EBONY)		+= ebony.o
+obj-$(CONFIG_MTD_OCOTEA)	+= ocotea.o
+obj-$(CONFIG_MTD_BEECH)		+= beech-mtd.o
+obj-$(CONFIG_MTD_ARCTIC)	+= arctic-mtd.o
+obj-$(CONFIG_MTD_WALNUT)        += walnut.o
+obj-$(CONFIG_MTD_H720X)		+= h720x-flash.o
+obj-$(CONFIG_MTD_SBC8240)	+= sbc8240.o
+obj-$(CONFIG_MTD_NOR_TOTO)	+= omap-toto-flash.o
+obj-$(CONFIG_MTD_MPC1211)	+= mpc1211.o
+obj-$(CONFIG_MTD_IXP4XX)	+= ixp4xx.o
+obj-$(CONFIG_MTD_IXP2000)	+= ixp2000.o
+obj-$(CONFIG_MTD_WRSBC8260)	+= wr_sbc82xx_flash.o
+obj-$(CONFIG_MTD_DMV182)	+= dmv182.o
+obj-$(CONFIG_MTD_SHARP_SL)	+= sharpsl-flash.o
+obj-$(CONFIG_MTD_PLATRAM)	+= plat-ram.o
+obj-$(CONFIG_MTD_OMAP_NOR)	+= omap_nor.o
+obj-$(CONFIG_MTD_MTX1)		+= mtx-1_flash.o
+obj-$(CONFIG_MTD_TQM834x)	+= tqm834x.o
diff -urN linux-2.6.19/drivers/mtd/maps/bcm963xx-flash.c linux-2.6.19.new/drivers/mtd/maps/bcm963xx-flash.c
--- linux-2.6.19/drivers/mtd/maps/bcm963xx-flash.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.19.new/drivers/mtd/maps/bcm963xx-flash.c	2006-12-18 17:21:07.000000000 +0100
@@ -0,0 +1,276 @@
+/*
+ * $Id$
+ * Copyright (C) 2006  Florian Fainelli
+ * Copyright (C) $Date$  $Author$
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+/* This is the BCM963xx flash map driver, in its actual state it only supports BCM96348 devices
+ * this driver is able to manage both bootloader we found on these boards : CFE and RedBoot
+ *
+ * RedBoot :
+ *  - this bootloader allows us to parse partitions and therefore deduce the MTD partition table
+ *
+ * CFE :
+ *   - we have to use a "physically mapped flash" defined bellow
+ *
+ */
+
+#include <asm/io.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/partitions.h>
+#include <linux/vmalloc.h>
+#include <board.h>
+
+#define WINDOW_ADDR 0x1FC00000                 /* Real address of the flash */
+#define WINDOW_SIZE 0x400000           /* Size of flash */
+#define BUSWIDTH 2                     /* Buswidth */
+#define EXTENDED_SIZE 0xBFC00000       /* Extended flash address */
+#define IMAGE_LEN 10                   /* Length of Length Field */
+#define ADDRESS_LEN 12                 /* Length of Address field */
+#define ROUNDUP(x, y) ((((x)+((y)-1))/(y))*(y))
+
+extern int boot_loader_type;           /* For RedBoot / CFE detection */
+extern int parse_redboot_partitions(struct mtd_info *master, struct mtd_partition **pparts, unsigned long fis_origin);
+static struct mtd_partition *parsed_parts;
+
+static void __exit bcm963xx_mtd_cleanup(void);
+
+static struct mtd_info *bcm963xx_mtd_info;
+
+static struct map_info bcm963xx_map = {
+       .name = "bcm963xx",
+       .size = WINDOW_SIZE,
+       .bankwidth = BUSWIDTH,
+       .phys = WINDOW_ADDR,
+};
+
+
+int parse_cfe_partitions( struct mtd_info *master, struct mtd_partition **pparts)
+{
+       int nrparts = 2, curpart = 0; // CFE and NVRAM always present.
+       struct bcm963xx_cfe_map {
+       unsigned char tagVersion[4];                            // Version of the image tag
+       unsigned char sig_1[20];                                // Company Line 1
+       unsigned char sig_2[14];                                // Company Line 2
+       unsigned char chipid[6];                                        // Chip this image is for
+       unsigned char boardid[16];                              // Board name
+       unsigned char bigEndian[2];                             // Map endianness -- 1 BE 0 LE
+       unsigned char totalLength[IMAGE_LEN];           //Total length of image
+       unsigned char cfeAddress[ADDRESS_LEN];  // Address in memory of CFE
+       unsigned char cfeLength[IMAGE_LEN];             // Size of CFE
+       unsigned char rootAddress[ADDRESS_LEN];         // Address in memory of rootfs
+       unsigned char rootLength[IMAGE_LEN];            // Size of rootfs
+       unsigned char kernelAddress[ADDRESS_LEN];       // Address in memory of kernel
+       unsigned char kernelLength[IMAGE_LEN];  // Size of kernel
+       unsigned char dualImage[2];                             // Unused at present
+       unsigned char inactiveFlag[2];                  // Unused at present
+       unsigned char reserved1[74];                            // Reserved area not in use
+       unsigned char imageCRC[4];                              // CRC32 of images
+       unsigned char reserved2[16];                            // Unused at present
+       unsigned char headerCRC[4];                             // CRC32 of header excluding tagVersion
+       unsigned char reserved3[16];                            // Unused at present
+       } *buf;
+       struct mtd_partition *parts;
+       int ret;
+       size_t retlen;
+       unsigned int rootfsaddr, kerneladdr, spareaddr;
+       unsigned int rootfslen, kernellen, sparelen, totallen;
+       int namelen = 0;
+       int i;
+       // Allocate memory for buffer
+       buf = vmalloc(sizeof(struct bcm963xx_cfe_map));
+
+       if (!buf)
+               return -ENOMEM;
+
+       // Get the tag
+       ret = master->read(master,master->erasesize,sizeof(struct bcm963xx_cfe_map), &retlen, (void *)buf);
+       if (retlen != sizeof(struct bcm963xx_cfe_map)){
+               vfree(buf);
+               return -EIO;
+       };
+       printk("bcm963xx: CFE boot tag found with version %s and board type %s.\n",buf->tagVersion,buf->boardid);
+       // Get the values and calculate
+       sscanf(buf->rootAddress,"%u", &rootfsaddr);
+       rootfsaddr = rootfsaddr - EXTENDED_SIZE;
+       sscanf(buf->rootLength, "%u", &rootfslen);
+       sscanf(buf->kernelAddress, "%u", &kerneladdr);
+       kerneladdr = kerneladdr - EXTENDED_SIZE;
+       sscanf(buf->kernelLength, "%u", &kernellen);
+       sscanf(buf->totalLength, "%u", &totallen);
+       spareaddr = ROUNDUP(totallen,master->erasesize) + master->erasesize;
+       sparelen = master->size - spareaddr - master->erasesize;
+       // Determine number of partitions
+       namelen = 8;
+       if (rootfslen > 0){
+               nrparts++;
+               namelen =+ 6;
+       };
+       if (kernellen > 0){
+               nrparts++;
+               namelen =+ 6;
+       };
+       if (sparelen > 0){
+               nrparts++;
+               namelen =+ 6;
+       };
+       // Ask kernel for more memory.
+       parts = kmalloc(sizeof(*parts)*nrparts+10*nrparts, GFP_KERNEL);
+       if (!parts){
+               vfree(buf);
+               return -ENOMEM;
+       };
+       memset(parts,0,sizeof(*parts)*nrparts+10*nrparts);
+       // Start building partition list
+       parts[curpart].name = "CFE";
+       parts[curpart].offset = 0;
+       parts[curpart].size = master->erasesize;
+       curpart++;
+       if (kernellen > 0){
+               parts[curpart].name = "Kernel";
+               parts[curpart].offset = kerneladdr;
+               parts[curpart].size = kernellen;
+               curpart++;
+       };
+       if (rootfslen > 0){
+               parts[curpart].name = "Rootfs";
+               parts[curpart].offset = rootfsaddr;
+               parts[curpart].size = rootfslen;
+               curpart++;
+       };
+       if (sparelen > 0){
+               parts[curpart].name = "OpenWrt";
+               parts[curpart].offset = spareaddr;
+               parts[curpart].size = sparelen;
+               curpart++;
+       };
+       parts[curpart].name = "NVRAM";
+       parts[curpart].offset = master->size - master->erasesize;
+       parts[curpart].size = master->erasesize;
+       for (i = 0; i < nrparts; i++) {
+          printk("bcm963xx: Partition %d is %s offset %x and length %x\n", i, parts[i].name, parts[i].offset, parts[i].size);
+       }
+       *pparts = parts;
+       vfree(buf);
+       return nrparts;
+};
+
+static struct mtd_partition bcm963xx_parts[] = {
+        { name: "bootloader",  size: 0,        offset: 0,      mask_flags: MTD_WRITEABLE },
+        { name: "rootfs",              size: 0,        offset: 0},
+        { name: "jffs2",        size: 5 * 0x10000,      offset: 57*0x10000}
+};
+
+static int bcm963xx_parts_size = sizeof(bcm963xx_parts) / sizeof(bcm963xx_parts[0]);
+
+static int bcm963xx_detect_cfe(struct mtd_info *master)
+{
+       int idoffset = 0x4e0;
+       static char idstring[8] = "CFE1CFE1";
+       char buf[8];
+       int ret;
+       size_t retlen;
+
+       ret = master->read(master, idoffset, 8, &retlen, (void *)buf);
+       printk("bcm963xx: Read Signature value of %s\n", buf);
+       return strcmp(idstring,buf);
+}
+
+static int __init bcm963xx_mtd_init(void)
+{
+       printk("bcm963xx: 0x%08x at 0x%08x\n", WINDOW_SIZE, WINDOW_ADDR);
+       bcm963xx_map.virt = ioremap(WINDOW_ADDR, WINDOW_SIZE);
+
+       if (!bcm963xx_map.virt) {
+               printk("bcm963xx: Failed to ioremap\n");
+               return -EIO;
+       }
+
+       simple_map_init(&bcm963xx_map);
+
+       bcm963xx_mtd_info = do_map_probe("cfi_probe", &bcm963xx_map);
+
+       if (bcm963xx_mtd_info) {
+               bcm963xx_mtd_info->owner = THIS_MODULE;
+
+               //if (boot_loader_type == BOOT_CFE)
+               if (bcm963xx_detect_cfe(bcm963xx_mtd_info) == 0)
+               {
+                       int parsed_nr_parts = 0;
+                       char * part_type;
+                       printk("bcm963xx: CFE bootloader detected\n");
+                       //add_mtd_device(bcm963xx_mtd_info);
+                       //add_mtd_partitions(bcm963xx_mtd_info, bcm963xx_parts, bcm963xx_parts_size);
+                       if (parsed_nr_parts == 0) {
+                               int ret = parse_cfe_partitions(bcm963xx_mtd_info, &parsed_parts);
+                               if (ret > 0) {
+                                       part_type = "CFE";
+                                       parsed_nr_parts = ret;
+                               }
+                       }
+                       add_mtd_partitions(bcm963xx_mtd_info, parsed_parts, parsed_nr_parts);
+                       return 0;
+               }
+               else
+               {
+                       int parsed_nr_parts = 0;
+                       char * part_type;
+
+                       if (bcm963xx_mtd_info->size > 0x00400000) {
+                               printk("Support for extended flash memory size : 0x%08X ; ONLY 64MBIT SUPPORT\n", bcm963xx_mtd_info->size);
+                               bcm963xx_map.virt = (unsigned long)(EXTENDED_SIZE);
+                       }
+
+#ifdef CONFIG_MTD_REDBOOT_PARTS
+                       if (parsed_nr_parts == 0) {
+                               int ret = parse_redboot_partitions(bcm963xx_mtd_info, &parsed_parts, 0);
+                               if (ret > 0) {
+                                       part_type = "RedBoot";
+                                       parsed_nr_parts = ret;
+                               }
+                       }
+#endif
+                       add_mtd_partitions(bcm963xx_mtd_info, parsed_parts, parsed_nr_parts);
+
+                       return 0;
+               }
+       }
+       iounmap(bcm963xx_map.virt);
+       return -ENXIO;
+}
+
+static void __exit bcm963xx_mtd_cleanup(void)
+{
+       if (bcm963xx_mtd_info) {
+               del_mtd_partitions(bcm963xx_mtd_info);
+               map_destroy(bcm963xx_mtd_info);
+       }
+
+       if (bcm963xx_map.virt) {
+               iounmap(bcm963xx_map.virt);
+               bcm963xx_map.virt = 0;
+       }
+}
+
+module_init(bcm963xx_mtd_init);
+module_exit(bcm963xx_mtd_cleanup);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Florian Fainelli <florian@openwrt.org>");
diff -urN linux-2.6.19/drivers/mtd/redboot.c linux-2.6.19.new/drivers/mtd/redboot.c
--- linux-2.6.19/drivers/mtd/redboot.c	2006-12-18 17:09:14.000000000 +0100
+++ linux-2.6.19.new/drivers/mtd/redboot.c	2006-12-18 17:14:26.000000000 +0100
@@ -39,7 +39,7 @@
 	return 1;
 }
 
-static int parse_redboot_partitions(struct mtd_info *master,
+int parse_redboot_partitions(struct mtd_info *master,
                              struct mtd_partition **pparts,
                              unsigned long fis_origin)
 {
@@ -132,6 +132,14 @@
 		goto out;
 	}
 
+	if (!fis_origin) {
+		for (i = 0; i < numslots; i++) {
+			if (!strncmp(buf[i].name, "RedBoot", 8)) {
+				fis_origin = (buf[i].flash_base & (master->size << 1) - 1);
+			}
+		}
+	}
+
 	for (i = 0; i < numslots; i++) {
 		struct fis_list *new_fl, **prev;
 
@@ -154,9 +162,8 @@
 		new_fl->img = &buf[i];
                 if (fis_origin) {
                         buf[i].flash_base -= fis_origin;
-                } else {
-                        buf[i].flash_base &= master->size-1;
                 }
+		buf[i].flash_base &= (master->size << 1) - 1;
 
 		/* I'm sure the JFFS2 code has done me permanent damage.
 		 * I now think the following is _normal_
